import streamlit as st
import pandas as pd
import joblib
import numpy as np
from pathlib import Path
from sklearn.preprocessing import LabelEncoder

st.set_page_config(page_title="’é’°÷Ä’Ø’∏÷Ç’∂’°’Ø’∏÷Ç’©’µ’°’∂ ’£’∂’°’∞’°’ø’∏÷Ç’¥", layout="centered")

st.markdown("<h1 style='text-align: center;'> ’é’°÷Ä’Ø’∏÷Ç’∂’°’Ø’∏÷Ç’©’µ’°’∂ ’£’∂’°’∞’°’ø’∏÷Ç’¥</h1>", unsafe_allow_html=True)
st.markdown("<p style='text-align: center;'> ’é’°÷Ä’Ø’∏÷Ç’∂’°’Ø’∏÷Ç’©’µ’°’∂ ’Ø’°’∂’≠’°’ø’•’Ω’∏÷Ç’¥ AI ’¥’∏’§’•’¨’´ ’¥’´’ª’∏÷Å’∏’æ÷â</p>", unsafe_allow_html=True)

# Load model
MODEL_PATH = Path(__file__).resolve().parent / "creditworthiness.pkl"
try:
    model = joblib.load(MODEL_PATH)
except Exception as e:
    st.error(f"Model load failed: {e}")
    st.stop()

# Mapping Armenian to English for model
marital_status_map = {
    "‘±’¥’∏÷Ç’Ω’∂’°÷Å’°’Æ": "Married",
    "’Ñ’´’°’µ’∂’°’Ø": "Single",
    "‘≤’°’™’°’∂’æ’°’Æ": "Divorced",
    "‘±’¥’∏÷Ç÷Ä’´": "Widowed"
}
employment_status_map = {
    "‘±’∑’≠’°’ø’∏÷Ç’¥ ’•÷Ñ": "Employed",
    "’â’•÷Ñ ’°’∑’≠’°’ø’∏÷Ç’¥": "Unemployed",
    "‘ª’∂÷Ñ’∂’°’¶’¢’°’≤’æ’°’Æ": "Self-Employed",
    "‘π’∏’∑’°’Ø’°’º’∏÷Ç": "Retired"
}
education_map = {
    "’Ñ’´’ª’∂’°’Ø’°÷Ä’£": "High School",
    "‘≤’°’Ø’°’¨’°’æ÷Ä": "Bachelor",
    "’Ñ’°’£’´’Ω’ø÷Ä’∏’Ω": "Master",
    "‘¥’∏’Ø’ø’∏÷Ä": "PhD",
    "’â’∏÷Ç’∂’•÷Ñ": "None"
}
collateral_map = {
    "‘±’µ’∏": "Yes",
    "’à’π": "No"
}
loan_purpose_map = {
    "’Ä’´÷É’∏’©’•÷Ñ": "Mortgage",
    "‘±’æ’ø’∏’æ’°÷Ä’Ø": "Auto Loan",
    "‘±’∂’±’∂’°’Ø’°’∂ ’æ’°÷Ä’Ø": "Personal Loan",
    "‘≤’´’¶’∂’•’Ω ’æ’°÷Ä’Ø": "Business Loan",
    "’à÷Ç’Ω’°’∂’∏’≤’°’Ø’°’∂ ’æ’°÷Ä’Ø": "Education Loan"
}


# Enhanced FICO-like calculation using official weights
def calc_fico(income: int, debt: int, age: int, loan_amount: int):
    base_score = 300

    # 1. Payment History surrogate (35%) ‚Üí debt-to-income ratio
    dti = debt / income if income > 0 else 1
    payment_history_score = (1 - min(dti, 1)) * 35

    # 2. Amounts Owed (30%) ‚Üí level of total debt
    amounts_owed_score = (1 - min(debt / 200000, 1)) * 30

    # 3. Length of Credit History (15%) ‚Üí proxy: borrower's age
    length_history_score = min(age / 100, 1) * 15

    # 4. New Credit (10%) ‚Üí size of new loan
    new_credit_penalty = min(loan_amount / 50000, 1) * 10
    new_credit_score = 10 - new_credit_penalty

    # 5. Credit Mix (10%) ‚Üí fixed small bonus due to lack of data
    credit_mix_score = 8

    total_score = base_score \
        + payment_history_score \
        + amounts_owed_score \
        + length_history_score \
        + new_credit_score \
        + credit_mix_score

    # Ensure within 300-850
    return int(np.clip(total_score, 300, 850))


def encode(val: str, categories: list[str]) -> int:
    le = LabelEncoder().fit(categories)
    return int(le.transform([val])[0])

# App
st.write("‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’¨÷Ä’°÷Å’∂’•’¨ ’¢’∏’¨’∏÷Ä ’§’°’∑’ø’•÷Ä’® ’∞’°’∑’æ’°÷Ä’Ø’´ ’∞’°’¥’°÷Ä÷â")

with st.form("credit_form"):
    # --- ‘±’∂’±’∂’°’Ø’°’∂ ’ø’æ’µ’°’¨’∂’•÷Ä ---
    st.subheader("üë§ ‘±’∂’±’∂’°’Ø’°’∂ ’è’æ’µ’°’¨’∂’•÷Ä")
    full_name = st.text_input("‘±’∂’∏÷Ç’∂ ‘±’¶’£’°’∂’∏÷Ç’∂")
    error_full_name = st.empty()

    age = st.selectbox("’è’°÷Ä’´÷Ñ", ["‚Äî ‘∏’∂’ø÷Ä’•÷Ñ ’ø’°÷Ä’´÷Ñ’® ‚Äî"] + list(range(18, 101)))
    error_age = st.empty()

    monthly_income = st.text_input("‘±’¥’Ω’°’Ø’°’∂ ’•’Ø’°’¥’∏÷Ç’ø (AMD)")
    error_monthly_income = st.empty()

    debt = st.text_input("‘∏’∂’§’∞’°’∂’∏÷Ç÷Ä ’∫’°÷Ä’ø÷Ñ (AMD)")
    error_debt = st.empty()

    loan_amount = st.text_input("’é’°÷Ä’Ø’´ ’£’∏÷Ç’¥’°÷Ä (AMD)")
    error_loan_amount = st.empty()

    # --- ’ñ’´’∂’°’∂’Ω’°’Ø’°’∂ ÷Å’∏÷Ç÷Å’°’∂’´’∑’∂’•÷Ä ---
    st.subheader("üè¶ ’ñ’´’∂’°’∂’Ω’°’Ø’°’∂ ’ë’∏÷Ç÷Å’°’∂’´’∑’∂’•÷Ä")
    num_bank_accounts = st.text_input("‘≤’°’∂’Ø’°’µ’´’∂ ’∞’°’∑’´’æ’∂’•÷Ä’´ ÷Ñ’°’∂’°’Ø")
    error_num_bank_accounts = st.empty()

    num_credit_cards = st.text_input("‘ø÷Ä’•’§’´’ø ÷Ñ’°÷Ä’ø’•÷Ä’´ ÷Ñ’°’∂’°’Ø")
    error_num_credit_cards = st.empty()

    num_of_loans = st.text_input("’é’°÷Ä’Ø’•÷Ä’´ ÷Ñ’°’∂’°’Ø")
    error_num_of_loans = st.empty()

    num_delayed_payments = st.text_input("’à÷Ç’∑’°÷Å÷Ä’°’Æ ’æ’≥’°÷Ä’∏÷Ç’¥’∂’•÷Ä’´ ÷Ñ’°’∂’°’Ø")
    error_num_delayed_payments = st.empty()

    credit_history_age = st.text_input("’é’°÷Ä’Ø’´ ’™’°’¥’Ø’•’ø (’°’¥’´’Ω’∂’•÷Ä’∏’æ)")
    error_credit_history_age = st.empty()

    # --- ’é’°÷Ä’Ø’°’µ’´’∂ ÷á ’°’∑’≠’°’ø’°’∂÷Ñ’°’µ’´’∂ ’ø’æ’µ’°’¨’∂’•÷Ä ---
    st.subheader("üìå ’é’°÷Ä’Ø’°’µ’´’∂ ÷á ‘±’∑’≠’°’ø’°’∂÷Ñ’°’µ’´’∂ ’è’æ’µ’°’¨’∂’•÷Ä")
    marital_status_arm = st.selectbox("‘±’¥’∏÷Ç’Ω’∂’°’Ø’°’∂ ’Ø’°÷Ä’£’°’æ’´’≥’°’Ø", ["‚Äî ‘∏’Ü’è’ê‘µ‘º ‚Äî"] + list(marital_status_map.keys()))
    error_marital_status = st.empty()

    employment_status_arm = st.selectbox("‘±’∑’≠’°’ø’°’∂÷Ñ’°’µ’´’∂ ’Ø’°÷Ä’£’°’æ’´’≥’°’Ø", ["‚Äî ‘∏’Ü’è’ê‘µ‘º ‚Äî"] + list(employment_status_map.keys()))
    error_employment_status = st.empty()

    education_level_arm = st.selectbox("‘ø÷Ä’©’∏÷Ç’©’µ’°’∂ ’¥’°’Ø’°÷Ä’§’°’Ø", ["‚Äî ‘∏’Ü’è’ê‘µ‘º ‚Äî"] + list(education_map.keys()))
    error_education_level = st.empty()

    collateral_arm = st.selectbox("‘≥÷Ä’°’æ ’Ø’°’û", ["‚Äî ‘∏’Ü’è’ê‘µ‘º ‚Äî"] + list(collateral_map.keys()))
    error_collateral = st.empty()

    loan_purpose_arm = st.selectbox("’é’°÷Ä’Ø’´ ’∂’∫’°’ø’°’Ø’®", ["‚Äî ‘∏’Ü’è’ê‘µ‘º ‚Äî"] + list(loan_purpose_map.keys()))
    error_loan_purpose = st.empty()

    # Buttons
    calculate_fico = st.form_submit_button("üìê ’Ä’°’∑’æ’•’¨ FICO ’Ω÷Ñ’∏÷Ä")
    predict_clicked = st.form_submit_button("üìà ’Ä’°’∑’æ’•’¨ ’æ’°÷Ä’Ø’∏÷Ç’∂’°’Ø’∏÷Ç’©’µ’∏÷Ç’∂’®")

    # General error below buttons
    error_general = st.empty()

    # Validation function
    def validate_all(require_full_model: bool):
        ok = True
        # Clear previous errors
        for ph in [error_full_name, error_age, error_monthly_income, error_debt, error_loan_amount,
                   error_num_bank_accounts, error_num_credit_cards, error_num_of_loans,
                   error_num_delayed_payments, error_credit_history_age,
                   error_marital_status, error_employment_status, error_education_level,
                   error_collateral, error_loan_purpose, error_general]:
            ph.empty()

        # Full model: require name
        if require_full_model and not full_name.strip():
            error_full_name.error("’ì’∏÷É’∏’≠’∏÷Ç’©’µ’∏÷Ç’∂ ’ß ’∫’°’∞’°’∂’ª’æ’∏÷Ç’¥÷â")
            ok = False
        # Age
        if age == "‚Äî ‘∏’∂’ø÷Ä’•÷Ñ ’ø’°÷Ä’´÷Ñ’® ‚Äî":
            error_age.error("‘∏’∂’ø÷Ä’•’¨ ’ø’°÷Ä’´÷Ñ’®÷â")
            ok = False

        # Numeric fields
        numeric_fields = [
            (monthly_income, error_monthly_income), (debt, error_debt), (loan_amount, error_loan_amount),
            (num_bank_accounts, error_num_bank_accounts), (num_credit_cards, error_num_credit_cards),
            (num_of_loans, error_num_of_loans), (num_delayed_payments, error_num_delayed_payments),
            (credit_history_age, error_credit_history_age)
        ]
        for val, ph in numeric_fields:
            if not val.strip():
                ph.error("’ä’•’ø÷Ñ ’ß ’¨÷Ä’°÷Å’æ’∂’•’¨")
                ok = False
            else:
                try:
                    num = float(val)
                    if num < 0:
                        ph.error("’â’´ ’Ø’°÷Ä’∏’≤ ’¢’°÷Å’°’Ω’°’Ø’°’∂ ’¨’´’∂’•’¨÷â")
                        ok = False
                except:
                    ph.error("’ä’•’ø÷Ñ ’ß ’©’æ’°’µ’´’∂ ’¨’´’∂’´÷â")
                    ok = False

        # Select fields for full model
        if require_full_model:
            if marital_status_arm == "‚Äî ‘∏’Ü’è’ê‘µ‘º ‚Äî":
                error_marital_status.error("‘∏’∂’ø÷Ä’•’¨ ’°÷Ä’™’•÷Ñ÷â")
                ok = False
            if employment_status_arm == "‚Äî ‘∏’Ü’è’ê‘µ‘º ‚Äî":
                error_employment_status.error("‘∏’∂’ø÷Ä’•’¨ ’°÷Ä’™’•÷Ñ÷â")
                ok = False
            if education_level_arm == "‚Äî ‘∏’Ü’è’ê‘µ‘º ‚Äî":
                error_education_level.error("‘∏’∂’ø÷Ä’•’¨ ’°÷Ä’™’•÷Ñ÷â")
                ok = False
            if collateral_arm == "‚Äî ‘∏’Ü’è’ê‘µ‘º ‚Äî":
                error_collateral.error("‘∏’∂’ø÷Ä’•’¨ ’°÷Ä’™’•÷Ñ÷â")
                ok = False
            if loan_purpose_arm == "‚Äî ‘∏’Ü’è’ê‘µ‘º ‚Äî":
                error_loan_purpose.error("‘∏’∂’ø÷Ä’•’¨ ’°÷Ä’™’•÷Ñ÷â")
                ok = False

        if not ok:
            error_general.error("’ä’•’ø÷Ñ ’ß ’¨÷Ä’°÷Å’∂’•’¨ ’¢’∏’¨’∏÷Ä ’§’°’∑’ø’•÷Ä’®÷â")
        return ok

    # Actions
    if calculate_fico:
        if validate_all(require_full_model=False):
            monthly_income, debt, loan_amount = float(monthly_income), float(debt), float(loan_amount)
            fico_score = calc_fico(monthly_income, debt, age, loan_amount)
            st.markdown(f"""
                <div style="background-color: #e6f2ff; padding: 15px; border-radius: 10px; margin-top: 10px; text-align: center;">
                    <h3>üìå ’Å’•÷Ä ’∞’°’∑’æ’°÷Ä’Ø’æ’°’Æ FICO ’Ω’Ø’∏÷Ä’∂ ’ß’ù <span style="color: #007acc;">{fico_score}</span></h3>
                </div>
            """, unsafe_allow_html=True)

    if predict_clicked:
        if validate_all(require_full_model=True):
            # Parse numeric fields
            monthly_income = float(monthly_income)
            debt = float(debt)
            loan_amount = float(loan_amount)
            num_bank_accounts = int(num_bank_accounts)
            num_credit_cards = int(num_credit_cards)
            num_of_loans = int(num_of_loans)
            num_delayed_payments = int(num_delayed_payments)
            credit_history_age = int(credit_history_age)

            # Translate to English and encode
            marital_status_encoded = encode(marital_status_map[marital_status_arm], list(marital_status_map.values()))
            employment_status_encoded = encode(employment_status_map[employment_status_arm], list(employment_status_map.values()))
            education_level_encoded = encode(education_map[education_level_arm], list(education_map.values()))
            collateral_encoded = encode(collateral_map[collateral_arm], list(collateral_map.values()))
            loan_purpose_encoded = encode(loan_purpose_map[loan_purpose_arm], list(loan_purpose_map.values()))

            # Calculate FICO for model input and DTI
            fico_score = calc_fico(monthly_income, debt, age, loan_amount)
            debt_to_income_ratio = debt / monthly_income if monthly_income > 0 else 0

            # Prepare DataFrame for prediction
            input_dict = {
                "Age": age,
                "Monthly_Income": monthly_income,
                "Debt": debt,
                "Loan_Amount": loan_amount,
                "Marital_Status": marital_status_encoded,
                "Employment_Status": employment_status_encoded,
                "Education_Level": education_level_encoded,
                "Collateral": collateral_encoded,
                "Loan_Purpose": loan_purpose_encoded,
                "Num_Bank_Accounts": num_bank_accounts,
                "Num_Credit_Cards": num_credit_cards,
                "Num_of_Loans": num_of_loans,
                "Num_Delayed_Payments": num_delayed_payments,
                "Credit_History_Age": credit_history_age,
                "FICO_Score": fico_score,
                "Debt_to_Income_Ratio": debt_to_income_ratio
            }
            input_df = pd.DataFrame([input_dict])

            # Predict
            proba = model.predict_proba(input_df)[0]
            prediction = int(np.argmax(proba))
            confidence = round(proba[prediction] * 100, 2)

            cmap = {0: ("‚ùå ’é’°’ø", "#ffcccc"), 1: ("‚ö†Ô∏è ’Ñ’´’ª’´’∂", "#fff0b3"), 2: ("‚úÖ ‘º’°’æ", "#ccffcc")}
            result_label, color = cmap.get(prediction, ("‘±’∂’∞’°’µ’ø", "#eeeeee"))

            st.markdown(f"""
                <div style="background-color: {color}; padding: 20px; border-radius: 15px; margin-top: 20px;">
                    <h2 style="text-align: center;">’Ä’°÷Ä’£’•’¨’´ <span style="color:#3366cc;">{full_name}</span>,</h2>
                    <h3 style="text-align: center;">‘¥’∏÷Ç÷Ñ ’∫’°’ø’Ø’°’∂’∏÷Ç’¥ ’•÷Ñ ’é’°÷Ä’Ø’∏÷Ç’∂’°’Ø’∏÷Ç’©’µ’°’∂ <strong>{result_label}</strong> ’§’°’Ω’´’∂÷â</h3>
                    <p style="text-align: center; font-size: 18px;">üìà ‘ø’°’∂’≠’°’ø’•’Ω’¥’°’∂ ’æ’Ω’ø’°’∞’∏÷Ç’©’µ’∏÷Ç’∂’ù <strong>{confidence}%</strong></p>
                </div>
            """, unsafe_allow_html=True)
